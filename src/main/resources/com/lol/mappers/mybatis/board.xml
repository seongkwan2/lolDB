<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board">

	<!-- 게시판 전체 글 목록 가져오기 -->
	<select id="getBoardList" resultType="board">
		SELECT * FROM lol_board
		order by b_num desc
	</select>

	<!-- 게시판 전체 글 개수 파악 -->
	<select id="getListCount" resultType="int">
		select count(b_num) from lol_board
	</select>

	<!-- 게시판 글쓰기 -->
	<insert id="writeBoard" parameterType="board">
		INSERT INTO lol_board
		values(lol_board_seq.nextval,#{b_id},#{b_title},#{b_cont},sysdate,#{b_category},0,0)
	</insert>

	<!-- 글번호로 글정보들을 가져오기 -->
	<select id="getCont" resultType="board">
		SELECT * FROM lol_board where
		b_num = #{b_num}
	</select>

	<!-- 글 삭제 -->
	<delete id="boardDel">
		DELETE lol_board where b_num = #{b_num}
	</delete>

	<!-- 글 수정 -->
	<update id="boardUpdate" parameterType="board">
		UPDATE lol_board SET
		b_title = #{b_title}, b_cont= #{b_cont}, b_date = sysdate WHERE b_num
		= #{b_num}
	</update>

	<!-- 글 확인시 조회수 증가 -->
	<update id="plusHits">
		UPDATE lol_board SET b_hits = b_hits +1 WHERE b_num = #{b_num}
	</update>

	<!-- 기존 맵퍼 정의 -->
	<resultMap id="boardResultMap" type="board">
		<id property="b_num" column="b_num" />
		<!-- 기타 필드 매핑 -->
		<result property="b_title" column="b_title" />
		<result property="b_id" column="b_id" />
		<result property="b_date" column="b_date" />
		<result property="b_hits" column="b_hits" />
		<result property="b_likes" column="b_likes" />
		<result property="replyCount" column="reply_count" />
	</resultMap>	<!-- BoardVO 클래스의 replyCount 프로퍼티와 데이터베이스의 reply_count 컬럼을 서로 연결 -->

	<!-- 해당 카테고리의 게시글과 댓글수를 가져옴 -->
	<select id="getBoardListWithReplyCount" parameterType="page" resultMap="boardResultMap">
	    SELECT b.b_num, b.b_title, b.b_id, b.b_date, b.b_hits, b.b_likes,
	    COUNT(r.r_num) AS reply_count
	    FROM lol_board b
	    LEFT JOIN lol_board_reply r ON b.b_num = r.r_board_num
	    <!-- 카테고리에 따른 필터링 조건 -->
	    <where>
	        <if test="b_category != null and b_category != ''">
	            AND b.b_category = #{b_category}
	        </if>
	    </where>
	    GROUP BY b.b_num, b.b_title, b.b_id, b.b_date, b.b_hits, b.b_likes
	    ORDER BY b.b_num DESC
	    OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select>
	
	<!-- 카테고리 별로 글을 가져와서 글의 개수체크 (카테고리 마다 다른 페이징을 위함)  -->
	<select id="getCountByCategory" parameterType="string" resultType="int">
    	SELECT COUNT(*) FROM lol_board WHERE b_category = #{b_category}
	</select>

	<!-- 추천 상태 확인 -->
	<select id="checkLikeStatus" parameterType="map"
		resultType="int">
		SELECT COUNT(*) FROM lol_board_likes
		WHERE b_num = #{b_num}
		AND m_id = #{m_id}
	</select>

	<!-- 추천 추가 (해당 아이디의 추천 기록을 추가) (중복 추천을 못하게 하는 코드) -->
	<insert id="addLike" parameterType="map">
		INSERT INTO lol_board_likes
		(like_id, b_num, m_id, liked)
		VALUES (lol_board_likes_seq.nextval,
		#{b_num}, #{m_id}, 'Y')
	</insert>

	<!-- 추천 제거 (해당 아이디의 추천 기록을 없앰) -->
	<delete id="removeLike" parameterType="map">
		DELETE FROM lol_board_likes WHERE b_num = #{b_num} AND m_id = #{m_id}
	</delete>

	<!-- 추천 수 증가 -->
	<update id="upLike" parameterType="map">
		UPDATE lol_board SET b_likes = b_likes + 1 WHERE b_num = #{b_num}
	</update>

	<!-- 추천 수 감소 -->
	<update id="downLike" parameterType="map">
		UPDATE lol_board SET b_likes = b_likes - 1 WHERE b_num = #{b_num}
	</update>

	<!-- 추천수를 가져오는 코드 -->
	<select id="getLikesCount" resultType="int">
		SELECT b_likes FROM lol_board WHERE b_num = #{b_num}
	</select>
	
	<!--게시글번호로 게시글 정보를 가져오는 코드  -->
	<select id="getBoardByNum" resultType="board">
		SELECT * FROM lol_board WHERE b_num = #{b_num}
	</select>
	
	<!-- 추천 게시글 조회 (페이징 처리 및 카테고리 필터링) -->
	<select id="getPopularByCategory" parameterType="page" resultMap="boardResultMap">
	    SELECT b.b_num, b.b_title, b.b_id, b.b_date, b.b_hits, b.b_likes,
	    COUNT(r.r_num) AS reply_count
	    FROM lol_board b
	    LEFT JOIN lol_board_reply r ON b.b_num = r.r_board_num
	    WHERE b.b_likes >= 30
	    <if test="b_category != null and b_category != ''">
	        AND b.b_category = #{b_category}
	    </if>
	    GROUP BY b.b_num, b.b_title, b.b_id, b.b_date, b.b_hits, b.b_likes
	    ORDER BY b.b_num DESC
	    OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select>
	
	<!-- (추천글에서 검색)게시글 조회 (페이징 처리 및 카테고리, 제목 필터링) -->
	<select id="getPopularByCategory2" parameterType="page" resultMap="boardResultMap">
	    SELECT b.b_num, b.b_title, b.b_id, b.b_date, b.b_hits, b.b_likes,
	    COUNT(r.r_num) AS reply_count
	    FROM lol_board b
	    LEFT JOIN lol_board_reply r ON b.b_num = r.r_board_num
	    WHERE b.b_likes >= 30
	    <if test="b_title != null and b_title != ''">
	        AND LOWER(b.b_title) LIKE LOWER('%${b_title}%')
	    </if>
	    <if test="b_category != null and b_category != ''">
	        AND b.b_category = #{b_category}
	    </if>
	    GROUP BY b.b_num, b.b_title, b.b_id, b.b_date, b.b_hits, b.b_likes
	    ORDER BY b.b_num DESC
	    OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select>

	
	<!-- 특정 카테고리의 추천 게시글 개수 조회 -->
	<select id="getPopularCount" parameterType="String" resultType="int">
	    SELECT COUNT(*)
	    FROM lol_board
	    WHERE b_likes >= 30
	    <if test="b_category != null and b_category != ''">
	        AND b_category = #{b_category}
	    </if>
	</select>
	
	<!-- 검색 쿼리 (제목 검색 및 댓글 수 포함) -->
	<select id="searchByTitle" resultMap="boardResultMap">
	    SELECT b.b_num, b.b_title, b.b_id, b.b_date, b.b_hits, b.b_likes, COUNT(r.r_num) AS reply_count
        FROM lol_board b
        LEFT JOIN lol_board_reply r ON b.b_num = r.r_board_num
        WHERE b.b_title LIKE '%' || #{b_title} || '%' AND b.b_category = #{b_category}
        GROUP BY b.b_num, b.b_title, b.b_id, b.b_date, b.b_hits, b.b_likes
        ORDER BY b.b_num DESC
        OFFSET 0 ROWS FETCH NEXT #{limit} ROWS ONLY
	</select>


	<!-- 검색 결과 개수 쿼리 수정: 카테고리 조건 추가 -->
	<select id="countSearchResults" resultType="int">
	    SELECT COUNT(*) FROM lol_board
	    WHERE b_title LIKE '%' || #{b_title} || '%' AND b_category = #{b_category}
	</select>



	
	




</mapper>